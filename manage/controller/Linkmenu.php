<?php

namespace app\manage\controller;
use app\common\controller\ManageBase;
class Linkmenu extends ManageBase
{
    protected $beforeActionList = [
        'beforeEdit' => ['only' => 'edit,add'],
    ];
    private $mod;
    private $menuId;

    public function initialize()
    {
        parent::initialize();
        $this->mod = model('linkmenu');
        $this->menuId = input('param.menu_id/d');

    }

    public function index()
    {
        $lists = $this->mod->where('menuid', $this->menuId)->order(['ordid'=>'asc','id'=>'desc'])->select();
        $lists = recursion(objToArray($lists));
        $this->assign('list', $lists);
        //bigmenu (标题，地址，弹窗ID，宽，高)
        $big_menu = [
            'title' => '添加栏目',
            'iframe' => url('Linkmenu/add', ['menu_id' => $this->menuId]),
            'id' => 'add',
            'width' => '500',
            'height' => '360'
        ];
        $this->_ajaxedit = true;
        $this->assign('big_menu', $big_menu);
        $this->assign('options', $this->check());
        $this->assign('pages','');
        return $this->fetch();
    }

    protected function beforeEdit()
    {
        $pid = input('param.pid/d');
        $spid = 0;
        if ($pid) {
            $spid = $this->mod->where(['id' => $pid])->value('spid');
            $spid = $spid ? $spid . $pid : $pid;
        }
        $this->assign('spid', $spid);
        $this->assign('menu_id', $this->menuId);
    }

    public function addDo()
    {
        $data = input('post.');
        $nameArray = explode("\n", str_replace('&', "\n", trim($data['name'])));
       // $aliasRadio = $data['aliasRadio'];
        //unset($data['aliasRadio']);
        $py = new \org\Pinyin();
        $addData = [];
        foreach ($nameArray as $v) {
            //检测分类是否存在
            if ($this->mod->name_exists($data['name'], $data['pid'],$data['menuid'])) {
                unset($v);
            } else {
                //生成spid
                $data['name'] = trim($v);
                $data['spid'] = $this->mod->get_spid($data['pid']);
                $data['alias'] = trim($py->getAllPY($data['name'])); //全部拼音
                $addData[] = $data;
            }
        }
        if ($this->mod->saveAll($addData)) {
            $this->doCache();
            return $this->ajaxReturn(1, '添加成功', '');
        } else {
            return $this->ajaxReturn(0, '添加失败', '');
        }

    }

    public function editDo()
    {
        \app\common\model\Linkmenu::event('after_update', function (Linkmenu $that,$obj) {
            $that->doCache();
        });
        parent::editDo(); // TODO: Change the autogenerated stub
    }

    public function delete()
    {
        //判断是否有下级栏目存在  存在则不能删除
        \app\common\model\Linkmenu::event('before_delete', function ($obj) {
            $id = $obj->id;
            //是否有下级栏目
            $child = $obj->get_child_ids($id);

            if (!empty($child)) {
                return false;
            }
            return true;
        });
        \app\common\model\Linkmenu::event('after_delete', function (Linkmenu $that,$obj) {
            $that->doCache();
        });
        parent::delete();
    }

    public function ajaxGetchilds()
    {
        $id = input('param.id/d');
        $menuId = input('param.menuid/d');
        $map['pid'] = $id;
        $menuId && $map['menuid'] = $menuId;
        $return = $this->mod->field('id,name')->where($map)->select();
        if (!$return->isEmpty()) {
            return $this->ajaxReturn(1, 'success', $return);
        } else {
            return $this->ajaxReturn(0, 'error');
        }
    }

    /**
     * @return mixed
     * 异步能过属性分类id获取其下所有属性并管理
     */
    public function ajaxGetAttr()
    {
        $menu_id = input('get.id/d',0);
        if($menu_id)
        {
            $lists = $this->mod->where('menuid',$menu_id)->field('id,name')->select();
            $this->assign('lists',$lists);
        }
        $this->assign('menu_id',$menu_id);
        return $this->fetch();
    }

    /**
     * @return \think\response\Json
     * 异步从缓存中获取指定分类下的属性
     */
    public function ajaxGetMenuCache()
    {
        $menu_id = input('get.id/d',0);
        $field   = input('get.field');
        $type    = input('get.type');
        $default = input('get.value',0);
        $return['code'] = 0;
        if($menu_id)
        {
           $str =  getLinkMenu($menu_id,$field,$type,$default);
            $return['code'] = 1;
            $return['data'] = $str;
        }
        return json($return);
    }
    /**
     * 更新联动菜单缓存
     */
    public function cache()
    {
        if ($this->doCache()) {
            $this->success('联动菜单缓存更新成功');
        } else {
            $this->error('联动菜单缓存更新失败');
        }
    }

    public function doCache()
    {
        $cate = model('linkmenu_cate');
        $cate_list = $cate->where('status', 1)->select();
        if ($cate_list) {
            foreach ($cate_list as $val) {
                $lists = $this->mod->field('id,pid,name,alias')->where(['status' => 1, 'menuid' => $val['id']])->select();
                if ($lists) {
                    $cate = objToArray($lists);//普通列表
                    $temp = [];
                    foreach ($cate as $v) {
                        $temp[$v['id']] = $v;
                    }
                    $tree = list_to_tree($temp);//树形列表
                    cache('linkmenu_' . $val['id'], ['cate' => $temp, 'tree' => $tree]);
                }
            }
            return true;
        }
        return false;
    }
}
